[
    {
        "id": "4f7179827ffc09fa",
        "type": "tab",
        "label": "1 Channel Vibration Sensor Plus",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "70998457709bb33e",
        "type": "ncd-gateway-node",
        "z": "4f7179827ffc09fa",
        "name": "",
        "connection": "0b47e914c1107fda",
        "unknown_devices": 0,
        "outputs": 1,
        "x": 330,
        "y": 480,
        "wires": [
            [
                "f111d382c133853c"
            ]
        ]
    },
    {
        "id": "8e2b72f4dd63627a",
        "type": "ncd-wireless-node",
        "z": "4f7179827ffc09fa",
        "name": "",
        "connection": "0b47e914c1107fda",
        "config_comm": "0b47e914c1107fda",
        "addr": "",
        "sensor_type": "80",
        "auto_config": "",
        "on_the_fly_enable": "",
        "node_id_delay_active": "",
        "node_id": 0,
        "delay": 300,
        "form_network": "",
        "destination_active": "",
        "destination": "0000FFFF",
        "power_active": "",
        "power": 4,
        "retries_active": "",
        "retries": 10,
        "pan_id_active": "",
        "pan_id": "7FFF",
        "change_enabled": "",
        "change_pr": "0",
        "change_interval": "0",
        "cm_calibration": "60.6",
        "bp_altitude": "0",
        "bp_pressure": "0",
        "bp_temp_prec": "0",
        "bp_press_prec": "0",
        "amgt_accel": "0",
        "amgt_mag": "0",
        "amgt_gyro": "0",
        "impact_accel_active": "",
        "impact_accel": "0",
        "impact_data_rate_active": "",
        "impact_data_rate": "4",
        "impact_threshold_active": "",
        "impact_threshold": 25,
        "impact_duration_active": "",
        "impact_duration": 1,
        "activ_interr_x": 1,
        "activ_interr_y": 2,
        "activ_interr_z": 4,
        "activ_interr_op": 8,
        "force_calibration_co2_auto_config": "",
        "force_calibration_co2": 400,
        "filtering": 0,
        "data_rate": 5,
        "time_series": 0,
        "reading_type": 1,
        "mode_80_active": "",
        "mode_80": 0,
        "measurement_mode_80_active": "",
        "measurement_mode_80": 0,
        "on_request_timeout_80_active": "",
        "on_request_timeout_80": 1,
        "sensor_boot_time_420ma_active": "",
        "sensor_boot_time_420ma": 0,
        "sensor_boot_time_78_active": "",
        "sensor_boot_time_78": 0,
        "deadband_80_active": "",
        "deadband_80": 0,
        "filter_80_active": "",
        "filter_80": 0,
        "output_data_rate_p1_81_active": "",
        "output_data_rate_p1_81": 0,
        "output_data_rate_p2_81_active": "",
        "output_data_rate_p2_81": 0,
        "sampling_duration_p1_81_active": "",
        "sampling_duration_p1_81": 0,
        "sampling_duration_p2_81_active": "",
        "sampling_duration_p2_81": 0,
        "led_alert_mode_84_active": "",
        "led_alert_mode_84": 0,
        "led_accelerometer_threshold_84_active": "",
        "led_accelerometer_threshold_84": "",
        "led_velocity_threshold_84_active": "",
        "led_velocity_threshold_84": "",
        "acceleration_interrupt_threshold_84_active": "",
        "acceleration_interrupt_threshold_84": "",
        "set_rtc_101": 0,
        "current_calibration_82": "",
        "current_calibration_82_active": false,
        "current_calibration_c1_80": 178,
        "current_calibration_c1_80_active": "",
        "current_calibration_c2_80": 178,
        "current_calibration_c2_80_active": "",
        "current_calibration_c3_80": 178,
        "current_calibration_c3_80_active": "",
        "output_data_rate_101_active": "",
        "output_data_rate_101": 0,
        "output_data_rate_101_m2_active": "",
        "output_data_rate_101_m2": 0,
        "sampling_duration_101_active": "",
        "sampling_duration_101": 1,
        "sampling_interval_101_active": "",
        "sampling_interval_101": 1,
        "full_scale_range_101_active": "",
        "full_scale_range_101": 1,
        "full_scale_range_101_m2_active": "",
        "full_scale_range_101_m2": 1,
        "x_axis_101": "",
        "y_axis_101": "",
        "z_axis_101": "",
        "low_pass_filter_80_active": "",
        "low_pass_filter_80": 0,
        "high_pass_filter_80_active": "",
        "high_pass_filter_80": 0,
        "low_pass_filter_81_p2_active": "",
        "low_pass_filter_81_p2": 0,
        "high_pass_filter_81_p2_active": "",
        "high_pass_filter_81_p2": 0,
        "roll_angle_threshold_47": 0,
        "roll_angle_threshold_47_active": "",
        "pitch_angle_threshold_47": 0,
        "pitch_angle_threshold_47_active": "",
        "counter_threshold_35": 50,
        "counter_threshold_35_active": "",
        "payload_length_80_active": "",
        "payload_length_80": 3,
        "motion_threshold_46_active": "",
        "motion_threshold_46": 100,
        "low_calibration_420ma_active": "",
        "low_calibration_420ma": 68805,
        "mid_calibration_420ma_active": "",
        "mid_calibration_420ma": 68724,
        "high_calibration_420ma_active": "",
        "high_calibration_420ma": 68714,
        "thermocouple_type_23_active": "",
        "thermocouple_type_23": 0,
        "x": 290,
        "y": 380,
        "wires": [
            [
                "4c6af4407906df35",
                "894eed25d188632b"
            ]
        ]
    },
    {
        "id": "894eed25d188632b",
        "type": "function",
        "z": "4f7179827ffc09fa",
        "name": "data_process",
        "func": "// Check if the message payload is a string, and parse it if necessary\nlet parsedMsg;\nif (typeof msg.payload === 'string') {\n    // If the payload is a string, parse it as JSON\n    parsedMsg = JSON.parse(msg.payload);\n} else {\n    // Otherwise, assume it's already an object\n    parsedMsg = msg.payload;\n}\n\n// Extract relevant data from the parsed message payload\nlet {\n    nodeId, firmware, battery, battery_percent: batteryPercent, counter, sensor_type: sensorType,\n    sensor_data: sensorData, sensor_name: sensorName, addr: sensorAddr, type\n} = parsedMsg;\n\n// Check if the sensor type is 80 (indicating vibration sensor) and sensorData is defined\nif (sensorData !== undefined) {\n\n    // Calculate the Total Vibration Level (TVL) using the root mean square (RMS) acceleration values for x, y, and z axes\n    let TVL = Math.sqrt(\n        Math.pow(sensorData.x_rms_ACC_G, 2) +\n        Math.pow(sensorData.y_rms_ACC_G, 2) +\n        Math.pow(sensorData.z_rms_ACC_G, 2)\n    );\n\n    // Combine the three peak values for each axis into a single string for x, y, and z axes\n    let xPeaks = `${sensorData?.x_peak_one_Hz}/${sensorData?.x_peak_two_Hz}/${sensorData?.x_peak_three_Hz}`;\n    let yPeaks = `${sensorData?.y_peak_one_Hz}/${sensorData?.y_peak_two_Hz}/${sensorData?.y_peak_three_Hz}`;\n    let zPeaks = `${sensorData?.z_peak_one_Hz}/${sensorData?.z_peak_two_Hz}/${sensorData?.z_peak_three_Hz}`;\n\n    // Estimate the motor speed (Hz) by finding the maximum peak frequency value among all axes\n    let xMaxPeak = Math.max(sensorData?.x_peak_one_Hz, sensorData?.x_peak_two_Hz, sensorData?.x_peak_three_Hz);\n    let yMaxPeak = Math.max(sensorData?.y_peak_one_Hz, sensorData?.y_peak_two_Hz, sensorData?.y_peak_three_Hz);\n    let zMaxPeak = Math.max(sensorData?.z_peak_one_Hz, sensorData?.z_peak_two_Hz, sensorData?.z_peak_three_Hz);\n\n    // Determine the highest peak value to estimate motor speed\n    let estimatedMotorSpeedHz = Math.max(xMaxPeak, yMaxPeak, zMaxPeak);\n\n    // Return an array of objects with each piece of relevant data for further processing\n    return [\n        { payload: sensorAddr },                     // Sensor mode\n        { payload: sensorData?.odr.match(/\\d+/)[0] },      // Output data rate (ODR) extracted as a number\n        { payload: sensorData?.temperature },              // Temperature reading\n        { payload: sensorData?.x_rms_ACC_G },              // X-axis RMS acceleration\n        { payload: sensorData?.x_max_ACC_G },              // X-axis max acceleration\n        { payload: sensorData?.y_rms_ACC_G },              // Y-axis RMS acceleration\n        { payload: sensorData?.y_max_ACC_G },              // Y-axis max acceleration\n        { payload: sensorData?.z_rms_ACC_G },              // Z-axis RMS acceleration\n        { payload: sensorData?.z_max_ACC_G },              // Z-axis max acceleration\n        { payload: batteryPercent },                       // Battery level percentage\n        { payload: TVL },                                  // Total Vibration Level (TVL)\n        { payload: xPeaks },                               // Combined X-axis peaks\n        { payload: yPeaks },                               // Combined Y-axis peaks\n        { payload: zPeaks },                               // Combined Z-axis peaks\n        { payload: estimatedMotorSpeedHz },                // Estimated motor speed in Hz\n    ];\n}\n",
        "outputs": 15,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "8dd9885671adfbec"
            ],
            [
                "13b3b71336aaf827"
            ],
            [
                "355682059521a6b0"
            ],
            [
                "2f430dbd346b03ac"
            ],
            [
                "03c677210ebbc5cd"
            ],
            [
                "18c28a0ffabbeaf6"
            ],
            [
                "53fc8d1714b4f812"
            ],
            [
                "4d0d7e52d99995c1"
            ],
            [
                "e50f2c8c88761293"
            ],
            [
                "58e1d4e3f657be1d"
            ],
            [
                "1831e0b4b2bda4da"
            ],
            [
                "c0330fc215a256fa"
            ],
            [
                "1552b4758d47ccd7"
            ],
            [
                "7296c56763e16a90"
            ],
            [
                "3e53ac875054447e"
            ]
        ]
    },
    {
        "id": "4c6af4407906df35",
        "type": "debug",
        "z": "4f7179827ffc09fa",
        "name": "From Sensor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 240,
        "wires": []
    },
    {
        "id": "13b3b71336aaf827",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/Output Data Range",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 880,
        "y": 140,
        "wires": []
    },
    {
        "id": "355682059521a6b0",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/Temperature",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 860,
        "y": 180,
        "wires": []
    },
    {
        "id": "2f430dbd346b03ac",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/X RMS ACC G",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 870,
        "y": 220,
        "wires": []
    },
    {
        "id": "03c677210ebbc5cd",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/X MAX ACC G",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 870,
        "y": 260,
        "wires": []
    },
    {
        "id": "18c28a0ffabbeaf6",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/Y RMS ACC G",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 870,
        "y": 300,
        "wires": []
    },
    {
        "id": "53fc8d1714b4f812",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/Y MAX ACC G",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 870,
        "y": 340,
        "wires": []
    },
    {
        "id": "4d0d7e52d99995c1",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/Z RMS ACC G",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 870,
        "y": 380,
        "wires": []
    },
    {
        "id": "e50f2c8c88761293",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/Z MAX ACC G",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 870,
        "y": 420,
        "wires": []
    },
    {
        "id": "f111d382c133853c",
        "type": "debug",
        "z": "4f7179827ffc09fa",
        "name": "From Gateway",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 520,
        "wires": []
    },
    {
        "id": "58e1d4e3f657be1d",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/Battery",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 840,
        "y": 460,
        "wires": []
    },
    {
        "id": "1831e0b4b2bda4da",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/Total Vibration Level",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 890,
        "y": 500,
        "wires": []
    },
    {
        "id": "c0330fc215a256fa",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/X Peaks",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 850,
        "y": 540,
        "wires": []
    },
    {
        "id": "1552b4758d47ccd7",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/Y Peaks",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 850,
        "y": 580,
        "wires": []
    },
    {
        "id": "7296c56763e16a90",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/Z Peaks",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 850,
        "y": 620,
        "wires": []
    },
    {
        "id": "3e53ac875054447e",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "ds/Estimated Motor Speed Hz",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 910,
        "y": 660,
        "wires": []
    },
    {
        "id": "8dd9885671adfbec",
        "type": "mqtt out",
        "z": "4f7179827ffc09fa",
        "name": "",
        "topic": "meta/MAC",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f469f8f163fbed8e",
        "x": 850,
        "y": 100,
        "wires": []
    },
    {
        "id": "0b47e914c1107fda",
        "type": "ncd-gateway-config",
        "name": "gateway",
        "comm_type": "serial",
        "ip_address": "",
        "tcp_port": "2101",
        "port": "/dev/ttymxc2",
        "baudRate": "115200",
        "pan_id": "7fff",
        "rssi": false
    },
    {
        "id": "f469f8f163fbed8e",
        "type": "mqtt-broker",
        "name": "blynk.cloud - vibration free",
        "broker": "blynk.cloud",
        "port": "8883",
        "tls": "536c3c3ae5738546",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "ds/Terminal",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "|BLYNK| Type \"help\" for the list of available commands",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "536c3c3ae5738546",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "ISRG_Root_X1.der",
        "servername": "blynk.cloud",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]

